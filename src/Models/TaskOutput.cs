// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace HPC.ACM.API.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The end of the output can only be told by size of value 0 and the end
    /// of the task.
    /// </summary>
    public partial class TaskOutput
    {
        /// <summary>
        /// Initializes a new instance of the TaskOutput class.
        /// </summary>
        public TaskOutput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TaskOutput class.
        /// </summary>
        /// <param name="eof">Whether the end of output is reached</param>
        /// <param name="offset">Distance between the start of the returned
        /// content and the start of the whole output</param>
        /// <param name="size">Length of the content(in a unit meaningful only
        /// to the server, not in character of content)</param>
        /// <param name="content">The output content</param>
        public TaskOutput(bool? eof = default(bool?), int? offset = default(int?), int? size = default(int?), string content = default(string))
        {
            Eof = eof;
            Offset = offset;
            Size = size;
            Content = content;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets whether the end of output is reached
        /// </summary>
        [JsonProperty(PropertyName = "eof")]
        public bool? Eof { get; set; }

        /// <summary>
        /// Gets or sets distance between the start of the returned content and
        /// the start of the whole output
        /// </summary>
        [JsonProperty(PropertyName = "offset")]
        public int? Offset { get; set; }

        /// <summary>
        /// Gets or sets length of the content(in a unit meaningful only to the
        /// server, not in character of content)
        /// </summary>
        [JsonProperty(PropertyName = "size")]
        public int? Size { get; set; }

        /// <summary>
        /// Gets or sets the output content
        /// </summary>
        [JsonProperty(PropertyName = "content")]
        public string Content { get; set; }

    }
}
