// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace HPC.ACM.API.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class Node
    {
        /// <summary>
        /// Initializes a new instance of the Node class.
        /// </summary>
        public Node()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Node class.
        /// </summary>
        /// <param name="state">Possible values include: 'Online',
        /// 'Offline'</param>
        /// <param name="health">Possible values include: 'OK', 'Warning',
        /// 'Error'</param>
        public Node(string id = default(string), string name = default(string), string state = default(string), string health = default(string), int? runningJobCount = default(int?), int? eventCount = default(int?), NodeRegistration nodeRegistrationInfo = default(NodeRegistration))
        {
            Id = id;
            Name = name;
            State = state;
            Health = health;
            RunningJobCount = runningJobCount;
            EventCount = eventCount;
            NodeRegistrationInfo = nodeRegistrationInfo;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Online', 'Offline'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'OK', 'Warning', 'Error'
        /// </summary>
        [JsonProperty(PropertyName = "health")]
        public string Health { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "runningJobCount")]
        public int? RunningJobCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "eventCount")]
        public int? EventCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "nodeRegistrationInfo")]
        public NodeRegistration NodeRegistrationInfo { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RunningJobCount < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "RunningJobCount", 0);
            }
            if (EventCount < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "EventCount", 0);
            }
        }
    }
}
