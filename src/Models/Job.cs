// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace HPC.ACM.API.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Job
    {
        /// <summary>
        /// Initializes a new instance of the Job class.
        /// </summary>
        public Job()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Job class.
        /// </summary>
        /// <param name="type">Possible values include: 'ClusRun',
        /// 'Diagnostics'</param>
        /// <param name="id">job id</param>
        /// <param name="name">job name give by user</param>
        /// <param name="commandLine">Available only for ClusRun job</param>
        /// <param name="diagnosticTest">Available only for Diagnostics
        /// job</param>
        /// <param name="state">Possible values include: 'Queued', 'Running',
        /// 'Finished', 'Finishing', 'Canceling', 'Failed', 'Canceled'</param>
        /// <param name="targetNodes">Nodes on which the job runs</param>
        /// <param name="progress">Job progress</param>
        /// <param name="events">Events happened in the job</param>
        /// <param name="requeueCount">The number of times the job is
        /// requeued</param>
        public Job(string type = default(string), int? id = default(int?), string name = default(string), string commandLine = default(string), DiagnoticTest diagnosticTest = default(DiagnoticTest), string state = default(string), IList<string> targetNodes = default(IList<string>), int? progress = default(int?), IList<EventModel> events = default(IList<EventModel>), int? requeueCount = default(int?), bool? failJobOnTaskFailure = default(bool?), System.DateTime? createdAt = default(System.DateTime?), System.DateTime? updatedAt = default(System.DateTime?))
        {
            Type = type;
            Id = id;
            Name = name;
            CommandLine = commandLine;
            DiagnosticTest = diagnosticTest;
            State = state;
            TargetNodes = targetNodes;
            Progress = progress;
            Events = events;
            RequeueCount = requeueCount;
            FailJobOnTaskFailure = failJobOnTaskFailure;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'ClusRun', 'Diagnostics'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets job id
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or sets job name give by user
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets available only for ClusRun job
        /// </summary>
        [JsonProperty(PropertyName = "commandLine")]
        public string CommandLine { get; set; }

        /// <summary>
        /// Gets or sets available only for Diagnostics job
        /// </summary>
        [JsonProperty(PropertyName = "diagnosticTest")]
        public DiagnoticTest DiagnosticTest { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Queued', 'Running',
        /// 'Finished', 'Finishing', 'Canceling', 'Failed', 'Canceled'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets nodes on which the job runs
        /// </summary>
        [JsonProperty(PropertyName = "targetNodes")]
        public IList<string> TargetNodes { get; set; }

        /// <summary>
        /// Gets or sets job progress
        /// </summary>
        [JsonProperty(PropertyName = "progress")]
        public int? Progress { get; set; }

        /// <summary>
        /// Gets or sets events happened in the job
        /// </summary>
        [JsonProperty(PropertyName = "events")]
        public IList<EventModel> Events { get; set; }

        /// <summary>
        /// Gets or sets the number of times the job is requeued
        /// </summary>
        [JsonProperty(PropertyName = "requeueCount")]
        public int? RequeueCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "failJobOnTaskFailure")]
        public bool? FailJobOnTaskFailure { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdAt")]
        public System.DateTime? CreatedAt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "updatedAt")]
        public System.DateTime? UpdatedAt { get; set; }

    }
}
