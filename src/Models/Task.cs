// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace HPC.ACM.API.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Task
    {
        /// <summary>
        /// Initializes a new instance of the Task class.
        /// </summary>
        public Task()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Task class.
        /// </summary>
        /// <param name="id">task id</param>
        /// <param name="jobId">Id of the job the task belongs to</param>
        /// <param name="jobType">Type of the job the task belongs to. Possible
        /// values include: 'ClusRun', 'Diagnostics'</param>
        /// <param name="state">Task state. Possible values include: 'Queued',
        /// 'Dispatching', 'Running', 'Finished', 'Failed', 'Canceled'</param>
        /// <param name="commandLine">Available only when task's job type is
        /// ClusRun</param>
        /// <param name="node">The node on which the task runs</param>
        public Task(int? id = default(int?), int? jobId = default(int?), string jobType = default(string), string state = default(string), string commandLine = default(string), string node = default(string), IList<int?> parentIds = default(IList<int?>), IList<int?> childIds = default(IList<int?>), IList<int?> remainingParentIds = default(IList<int?>), string customizedData = default(string))
        {
            Id = id;
            JobId = jobId;
            JobType = jobType;
            State = state;
            CommandLine = commandLine;
            Node = node;
            ParentIds = parentIds;
            ChildIds = childIds;
            RemainingParentIds = remainingParentIds;
            CustomizedData = customizedData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets task id
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or sets id of the job the task belongs to
        /// </summary>
        [JsonProperty(PropertyName = "jobId")]
        public int? JobId { get; set; }

        /// <summary>
        /// Gets or sets type of the job the task belongs to. Possible values
        /// include: 'ClusRun', 'Diagnostics'
        /// </summary>
        [JsonProperty(PropertyName = "jobType")]
        public string JobType { get; set; }

        /// <summary>
        /// Gets or sets task state. Possible values include: 'Queued',
        /// 'Dispatching', 'Running', 'Finished', 'Failed', 'Canceled'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets available only when task's job type is ClusRun
        /// </summary>
        [JsonProperty(PropertyName = "commandLine")]
        public string CommandLine { get; set; }

        /// <summary>
        /// Gets or sets the node on which the task runs
        /// </summary>
        [JsonProperty(PropertyName = "node")]
        public string Node { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "parentIds")]
        public IList<int?> ParentIds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "childIds")]
        public IList<int?> ChildIds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "remainingParentIds")]
        public IList<int?> RemainingParentIds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "customizedData")]
        public string CustomizedData { get; set; }

    }
}
